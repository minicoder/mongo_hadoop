<?xml version="1.0"?> 
<configuration>
  <property>
    <!-- run the job verbosely ? -->
    <name>mongo.job.verbose</name>
    <value>true</value>
  </property>
  <property>
    <!-- Run the job in the foreground and wait for response, or background it? -->
    <name>mongo.job.background</name>
    <value>false</value>
  </property>
  <property>
      <!-- The field to pass as the mapper key. Defaults to _id if blank -->
      <name>mongo.input.key</name>
      <value></value>
  </property>
  <property>
    <!-- If you are reading from mongo, the URI -->
    <name>mongo.input.uri</name>
    <value></value>
  </property>
<property>
<name>mapred.input.dir</name>
<!--<value>s3.amazonaws.com/crawler-corpus/messages.bson</value>-->
<value>s3n://aws-publicdatasets/common-crawl/parse-output/segment/1346876860445/textData-0281*</value>
<!--<value>s3n://aws-publicdatasets/common-crawl/parse-output/segment/*/textData-*</value>-->
</property>
  <property>
    <!-- If you are writing to mongo, the URI -->
    <name>mongo.output.uri</name>
   <!-- <value>mongodb://ec2-54-197-69-75.compute-1.amazonaws.com:27017/mongo_hadoop.crawler_1.out</value>  -->
    <value>mongodb://ec2-184-73-58-150.compute-1.amazonaws.com:27017/mongo.inverted_index.out</value>
</property>
  <property>
    <!-- The query, in JSON, to execute [OPTIONAL] -->
    <name>mongo.input.query</name>
    <!--<value>{"x": {"$regex": "^eliot", "$options": ""}}</value>-->
    <value></value>
  </property>
  <property>
    <!-- The fields, in JSON, to read [OPTIONAL] -->
    <name>mongo.input.fields</name>
    <value></value>
  </property>
  <property>
    <!-- A JSON sort specification for read [OPTIONAL] -->
    <name>mongo.input.sort</name>
    <value></value>
  </property>
  <property>
    <!-- The number of documents to limit to for read [OPTIONAL] -->
    <name>mongo.input.limit</name>
    <value>0</value> <!-- 0 == no limit -->
  </property>
  <property>
    <!-- The number of documents to skip in read [OPTIONAL] -->
    <!-- TODO - Are we running limit() or skip() first? -->
    <name>mongo.input.skip</name>
    <value>0</value> <!-- 0 == no skip -->
  </property>
  <property>
    <!-- Class for the mapper -->
    <name>mongo.job.mapper</name>
    <value>crawler.CrawlerCorpusMapper</value>
  </property>
  <property>
    <!-- Reducer class -->
    <name>mongo.job.reducer</name>
    <value>crawler.CrawlerCorpusReducer</value>
  </property>
  <property>
    <!-- InputFormat Class -->
    <name>mongo.job.input.format</name>
    <value>org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat</value>
     <!--<value>com.mongodb.hadoop.BSONFileInputFormat</value>-->
  </property>
  <property>
    <!-- OutputFormat Class -->
    <name>mongo.job.output.format</name>
    <value>com.mongodb.hadoop.MongoOutputFormat</value> 
  </property>
  <property>
    <!-- Output key class for the output format -->
    <name>mongo.job.output.key</name>
    <!--<value>org.apache.hadoop.io.LongWritable</value>-->
   <value>org.apache.hadoop.io.Text</value> 
</property>
  <property>
    <!-- Output value class for the output format -->
    <name>mongo.job.output.value</name>
    <value>com.mongodb.hadoop.io.BSONWritable</value>
<!--<value>org.apache.hadoop.io.IntWritable</value>  -->
</property>
  <property>
    <!-- Output key class for the mapper [optional] -->
    <name>mongo.job.mapper.output.key</name>
    <!--<value>org.apache.hadoop.io.LongWritable</value>-->
   <value>org.apache.hadoop.io.Text</value> 
  </property>
  <property>
    <!-- Output value class for the mapper [optional] -->
    <name>mongo.job.mapper.output.value</name>
   <!-- <value>org.apache.hadoop.io.LongWritable</value>-->
    <value>org.apache.hadoop.io.Text</value>
  </property>  
  <property>
    <!-- Class for the combiner [optional] -->
    <name>mongo.job.combiner</name>
    <value></value>
  </property>
  <property>
    <!-- Partitioner class [optional] -->
    <name>mongo.job.partitioner</name>
    <value></value>
  </property>
  <property>
    <!-- Sort Comparator class [optional] -->
    <name>mongo.job.sort_comparator</name>
    <value></value>
  </property>
<property>
<name>bson.pathfilter.class</name>
<value>crawler.SampleFilter</value>
</property>
</configuration>
